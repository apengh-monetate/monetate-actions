"use strict";
// Create Countdown
var Countdown={
// Backbone-like structure
$el:$("#mte-countdown"),
// Params
countdown_interval:null,total_seconds:0,delta:0,
// Initialize the countdown
init:function s(){
// End Date
this.end_date=new Date(this.$el.attr("data-end-date")).getTime(),this.today=(new Date).getTime(),// Total seconds between the times
this.delta=Math.floor(this.end_date-this.today)/1e3,0<this.delta?$(".countdown").addClass("active"):($(".countdown").removeClass("active").addClass("expired"),$(".countdown__expired").addClass("active")),// Days
this.days=Math.floor(this.delta/86400),this.delta-=86400*this.days,// Hours
this.hours=Math.floor(this.delta/3600)%24,this.delta-=3600*this.hours,// Minutes
this.minutes=Math.floor(this.delta/60)%60,this.delta-=60*this.minutes,// Seconds
this.seconds=Math.floor(this.delta%60),// in theory the modulus is not required
console.log(this.days,this.hours,this.minutes,this.seconds),// DOM
this.$={days:this.$el.find(".countdown__block.days .figure"),hours:this.$el.find(".countdown__block.hours .figure"),minutes:this.$el.find(".countdown__block.minutes .figure"),seconds:this.$el.find(".countdown__block.seconds .figure")},// Init countdown values
this.values={days:this.days,hours:this.hours,minutes:this.minutes,seconds:this.seconds},this.total_seconds=24*this.values.days*60*60+60*this.values.minutes+this.values.seconds,// Animate countdown to the end
this.count()},count:function s(){var t=this,e=this.$.days.eq(0),i=this.$.days.eq(1),a=this.$.hours.eq(0),n=this.$.hours.eq(1),o=this.$.minutes.eq(0),d=this.$.minutes.eq(1),u=this.$.seconds.eq(0),h=this.$.seconds.eq(1);this.countdown_interval=setInterval(function(){0<t.total_seconds?(--t.values.seconds,0<=t.values.minutes&&t.values.seconds<0&&(t.values.seconds=59,--t.values.minutes),0<=t.values.hours&&t.values.minutes<0&&(t.values.minutes=59,--t.values.hours),0<=t.values.days&&t.values.hours<0&&(t.values.hours=59,--t.values.days),// Update DOM values
// Days
t.checkValue(t.values.days,e,i),// Hours
t.checkValue(t.values.hours,a,n),// Minutes
t.checkValue(t.values.minutes,o,d),// Seconds
t.checkValue(t.values.seconds,u,h),--t.total_seconds):(clearInterval(t.countdown_interval),$(".countdown").removeClass("active").addClass("expired"),$(".countdown__expired").addClass("active"))},1e3)},animateFigure:function s(t,e){var i=this,a=t.find(".top"),n=t.find(".bottom"),o=t.find(".top-back"),d=t.find(".bottom-back");// Before we begin, change the back value
o.find("span").html(e),// Also change the back bottom value
d.find("span").html(e),// Animate
a.addClass("flipTop"),setTimeout(function(){a.removeClass("flipTop"),a.html(e)},750),o.addClass("flipTopBack"),setTimeout(function(){o.removeClass("flipTopBack"),n.html(e)},750)},checkValue:function s(t,e,i){var a=t.toString().charAt(0),n=t.toString().charAt(1),o=e.find(".top").html(),d=i.find(".top").html();10<=t?(
// Animate only if the figure has changed
o!==a&&this.animateFigure(e,a),d!==n&&this.animateFigure(i,n)):(
// If we are under 10, replace first figure with 0
"0"!==o&&this.animateFigure(e,0),d!==a&&this.animateFigure(i,a))}};// Initialize countdown
Countdown.init();
//# sourceMappingURL=countdown.min.js.map